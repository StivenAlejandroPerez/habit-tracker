// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	habit_tracker "habit-tracker"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// HabitRepository is an autogenerated mock type for the HabitRepository type
type HabitRepository struct {
	mock.Mock
}

// InsertHabitCategories provides a mock function with given fields: ctx, habitCategories, now
func (_m *HabitRepository) InsertHabitCategories(ctx context.Context, habitCategories habit_tracker.HabitCategories, now time.Time) error {
	ret := _m.Called(ctx, habitCategories, now)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, habit_tracker.HabitCategories, time.Time) error); ok {
		r0 = rf(ctx, habitCategories, now)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertHabitRecords provides a mock function with given fields: ctx, habitRecords, now
func (_m *HabitRepository) InsertHabitRecords(ctx context.Context, habitRecords habit_tracker.HabitRecords, now time.Time) error {
	ret := _m.Called(ctx, habitRecords, now)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, habit_tracker.HabitRecords, time.Time) error); ok {
		r0 = rf(ctx, habitRecords, now)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertHabits provides a mock function with given fields: ctx, habits, now
func (_m *HabitRepository) InsertHabits(ctx context.Context, habits habit_tracker.Habits, now time.Time) error {
	ret := _m.Called(ctx, habits, now)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, habit_tracker.Habits, time.Time) error); ok {
		r0 = rf(ctx, habits, now)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateHabitCategories provides a mock function with given fields: ctx, habitCategories, now
func (_m *HabitRepository) UpdateHabitCategories(ctx context.Context, habitCategories habit_tracker.HabitCategories, now time.Time) error {
	ret := _m.Called(ctx, habitCategories, now)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, habit_tracker.HabitCategories, time.Time) error); ok {
		r0 = rf(ctx, habitCategories, now)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateHabitRecords provides a mock function with given fields: ctx, habitRecords, now
func (_m *HabitRepository) UpdateHabitRecords(ctx context.Context, habitRecords habit_tracker.HabitRecords, now time.Time) error {
	ret := _m.Called(ctx, habitRecords, now)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, habit_tracker.HabitRecords, time.Time) error); ok {
		r0 = rf(ctx, habitRecords, now)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateHabits provides a mock function with given fields: ctx, habits, now
func (_m *HabitRepository) UpdateHabits(ctx context.Context, habits habit_tracker.Habits, now time.Time) error {
	ret := _m.Called(ctx, habits, now)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, habit_tracker.Habits, time.Time) error); ok {
		r0 = rf(ctx, habits, now)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewHabitRepository creates a new instance of HabitRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHabitRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *HabitRepository {
	mock := &HabitRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
